name: Release

on:
  push:
    tags: ["v*"]

jobs:
  release:
    strategy:
      matrix:
        go_version:
          - 1.17.1
    runs-on: ubuntu-18.04
    steps:
      # step 1: checkout repository code
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go_version }}
      # step 2: set workflow variables
      - name: Initialize workflow variables
        id: vars
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
          echo ::set-output name=BUILDDATE::$(date '+%F-%T')
          echo ::set-output name=COMMIT::$(git rev-parse --verify HEAD)
          echo ::set-output name=APP_NAME::$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
      # step 3: generate build files
      - name: Install dependencies
        run: sudo apt-get install -y libpcap-dev
      - name: Generate build files for Linux
        run: |
          go mod tidy
          go mod vendor
          GOOS=linux GOARCH=amd64  go build  -o ./build/${{steps.vars.outputs.APP_NAME}}-linux-amd64
          CGO_ENABLED=1 CGO_LDFLAGS="-static" GOOS=linux GOARCH=amd64 go build -ldflags "-w -s -X main.Version=${{steps.vars.outputs.VERSION}}"  -o ./build/${{steps.vars.outputs.APP_NAME}}-static-linux-amd64
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64  go build -tags nocgo -ldflags "-w -s -X main.Version=${{steps.vars.outputs.VERSION}}"  -o ./build/${{steps.vars.outputs.APP_NAME}}-nocgo-linux-amd64
      - name: Generate build files for MacOS/Widnows
        uses: crazy-max/ghaction-xgo@v1
        with:
          xgo_version: latest
          go_version: ${{ matrix.go_version }}
          dest: build
          prefix: ${{steps.vars.outputs.APP_NAME}}
          targets: darwin/amd64,windows/amd64
          v: true
          x: false
          ldflags: -w -s -X main.Version=${{steps.vars.outputs.VERSION}}

      # step 4: compress build files
      - name: Compress build files
        run: cd ./build && chmod +x ./${{steps.vars.outputs.APP_NAME}}-* && for i in *; do tar -czf $i.tar.gz $i; done && cd ..
      # step 5: Upload binary to GitHub Release
      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*.tar.gz
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}
